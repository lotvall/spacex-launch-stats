{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","classname","LAUNCHES_QUERY","gql","_templateObject","Launches","Fragment","react_apollo_browser_umd","query","loading","error","data","console","log","react","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","err","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","logoStyle","width","display","margin","containerStyle","client","ApolloClient","uri","App","BrowserRouter","style","Object","objectSpread","src","logo","alt","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fc13dee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nconst style = {\n  width:300,\n  display:'block',\n  margin: 'auto'\n\n}\n\nexport default function LaunchItem({launch: {flight_number, mission_name, launch_date_local, launch_success }}) {\n  return (\n    <div className=\"card card-body mb-3\">\n    <div className=\"row\">\n      <div className=\"col-md-9\">\n      <h4> Mission: <span className={classNames({\n        'text-success' : launch_success,\n        'text-danger' : !launch_success\n      })}>{mission_name}</span></h4>\n      <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n      </div>\n      <div className=\"col-md-3\">\n      <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n      </div>\n\n      </div>\n\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div classname=\"my-3\">\n    <p><span className=\"px-3 mr-2 bg-success\"/> = Sucessful</p>\n    <p><span className=\"px-3 mr-2 bg-danger\"/> = Failed</p> \n\n    </div>\n  )\n\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`\n\nclass Launches extends Component {\n  render() {\n    return (\n      <>\n        <h1 className=\"display-4 my-3\">\n        Launches\n        </h1>\n        <MissionKey />\n\n        <Query query={LAUNCHES_QUERY}>\n         {\n           ({loading, error, data}) => {\n\n             if(loading) return <h4>Loading....</h4>\n             if(error) console.log(error)\n\n             return <Fragment>\n                 {\n                   data.launches.map(launch => (\n                     <LaunchItem key={launch.flight_number} launch={launch} />\n                   ))\n                 }\n\n              </Fragment>\n           }\n         }\n       </Query>\n      </>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment }  from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery ($flight_number: Int!){\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`\n\nclass Launch extends Component {\n  render() {\n\n    let { flight_number } = this.props.match.params\n    flight_number = parseInt(flight_number)\n    return (\n      <>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n        {\n          ({loading, err, data}) => {\n            if (loading) return <h4>Loading launch data</h4>\n            if (err) console.log(err)\n\n            const { flight_number,\n            mission_name,\n            launch_year,\n            launch_date_local,\n            launch_success,\n            rocket: {\n              rocket_id,\n              rocket_name,\n              rocket_type,\n            }\n          } = data.launch\n\n            return <div>\n              <h1 className=\"display-4 my-3\"> <span className=\"text-dark\">Mission:</span> {mission_name}</h1>\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">Launch Successful: <span className={classNames({\n                  'text-success' : launch_success,\n                  'text-danger' : !launch_success,\n                })}>{launch_success ? 'yes' : 'no' }</span></li>\n\n              </ul>\n              <h4 className=\"my-3\">Rocket Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n\n              </ul>\n              <hr/>\n\n              <Link to=\"/\" className=\"btn btn-secondary\"> Back</Link>\n\n            </div>\n\n          }\n        }\n        </Query>\n      </>\n    )\n  }\n}\nexport default Launch\n","import React, { Component } from 'react';\nimport logo from './logo.png'\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from 'react-apollo'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\n\nconst logoStyle = {\n  width:300,\n  display:'block',\n  margin: 'auto'\n}\n\nconst containerStyle = {\n  width:1000,\n  display:'block',\n  margin: 'auto'\n}\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\" style={{...containerStyle}}>\n            <img src={logo} alt=\"SpaceX\" style={logoStyle}/>\n            <Route exact path='/' component={Launches}/>\n            <Route exact path='/launch/:flight_number' component={Launch}/>\n\n\n          </div>\n        </Router>\n      </ApolloProvider>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}